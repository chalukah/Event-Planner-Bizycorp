import { useState, useRef, useEffect, ReactNode } from 'react';

type SplitPaneProps = {
  left: ReactNode;
  right: ReactNode;
  defaultLeftWidth?: number;
  minLeftWidth?: number;
  maxLeftWidth?: number;
  collapsible?: boolean;
};

export function SplitPane({
  left,
  right,
  defaultLeftWidth = 320,
  minLeftWidth = 240,
  maxLeftWidth = 600,
  collapsible = false
}: SplitPaneProps) {
  const [leftWidth, setLeftWidth] = useState(defaultLeftWidth);
  const [isDragging, setIsDragging] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!isDragging) return;

    const handleMouseMove = (e: MouseEvent) => {
      if (!containerRef.current) return;
      const containerRect = containerRef.current.getBoundingClientRect();
      const newWidth = e.clientX - containerRect.left;
      const clampedWidth = Math.max(minLeftWidth, Math.min(maxLeftWidth, newWidth));
      setLeftWidth(clampedWidth);
    };

    const handleMouseUp = () => {
      setIsDragging(false);
    };

    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [isDragging, minLeftWidth, maxLeftWidth]);

  return (
    <div ref={containerRef} className="flex h-full">
      <div
        style={{ width: leftWidth }}
        className="flex-shrink-0 border-r border-slate-200 dark:border-slate-700"
      >
        {left}
      </div>
      <div
        className={`w-1 hover:w-2 bg-slate-200 dark:bg-slate-700 hover:bg-blue-500 dark:hover:bg-blue-600 transition-all cursor-col-resize ${
          isDragging ? 'bg-blue-500 dark:bg-blue-600 w-2' : ''
        }`}
        onMouseDown={() => setIsDragging(true)}
        role="separator"
        aria-orientation="vertical"
        aria-label="Resize panels"
      />
      <div className="flex-1 overflow-hidden">{right}</div>
    </div>
  );
}
